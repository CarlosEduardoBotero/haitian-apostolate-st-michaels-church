---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHeader from "../../components/Sections/PageHeader.astro";
import Card from "../../components/UI/Card.astro";
import { getCollection } from "astro:content";
import { formatDate } from "../../utils/dateUtils";

// Get all blog posts
const allPosts = await getCollection("gallery", ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Sort by date (newest first)
const posts = allPosts.sort(
  (a, b) =>
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Get unique tags for filters
const tags = [...new Set(posts.flatMap((post) => post.data.tags))];
---

<BaseLayout
  title="Gallery - Haitian Apostolate"
  description="Read our latest articles, devotionals, and updates from our church community."
>
  <PageHeader
    title="Gallery"
    subtitle="Images from our church community"
    backgroundImage="/uploads/blog-header-bg.webp"
  />

  <!-- Blog Posts List -->
  <section class="py-16">
    <div class="container">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Blog Posts Grid -->
        <div class="lg:col-span-3">
          <h2 class="text-2xl font-bold mb-6">All Gallery Posts</h2>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-8" id="posts-grid">
            {
              posts.map((post) => (
                <Card
                  title={post.data.title}
                  image={
                    post.data.image && {
                      src: post.data.image.url,
                      alt: post.data.image.alt,
                    }
                  }
                  href={`/gallery/${post.slug}`}
                  className="blog-card"
                  data-tags={post.data.tags.join(",")}
                  data-author={post.data.author}
                  data-date={post.data.pubDate.toISOString().slice(0, 10)}
                >
                  <div class="mb-3 flex items-center text-gray-600">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 mr-2"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                    <span>{formatDate(post.data.pubDate)}</span>
                  </div>

                  <div class="mb-3 flex items-center text-gray-600">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 mr-2"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                      />
                    </svg>
                    <span>{post.data.author}</span>
                  </div>

                  <p class="text-gray-700 mb-4">{post.data.description}</p>

                  {post.data.tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mb-4">
                      {post.data.tags.map((tag) => (
                        <span class="px-2 py-1 text-xs font-medium text-primary-700 bg-primary-100 rounded-full">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}

                  <a
                    href={`/gallery/${post.slug}`}
                    class="text-primary-600 font-medium hover:text-primary-700"
                  >
                    View photos â†’
                  </a>
                </Card>
              ))
            }
          </div>

          <!-- No Results Message (Hidden by default) -->
          <div
            id="no-results"
            class="hidden text-center py-12 bg-gray-50 rounded-lg mt-8"
          >
            <p class="text-gray-600">
              No posts match your search criteria. Please try different filters.
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    // Filter functionality
    document.addEventListener("DOMContentLoaded", () => {
      const searchInput = document.getElementById("search") as HTMLInputElement;
      const authorInput = document.getElementById("author") as HTMLInputElement;
      const tagCheckboxes = document.querySelectorAll(
        ".tag-checkbox"
      ) as NodeListOf<HTMLInputElement>;
      const fromDateInput = document.getElementById(
        "from-date"
      ) as HTMLInputElement;
      const toDateInput = document.getElementById(
        "to-date"
      ) as HTMLInputElement;
      const resetButton = document.getElementById("reset-filters");
      const postsGrid = document.getElementById("posts-grid");
      const noResults = document.getElementById("no-results");
      const blogCards = document.querySelectorAll(".blog-card") as NodeListOf<
        HTMLAnchorElement | HTMLDivElement
      >;

      // Function to filter blog posts
      const filterPosts = () => {
        const searchTerm = searchInput?.value.toLowerCase() || "";
        const authorTerm = authorInput?.value.toLowerCase() || "";
        const fromDate = fromDateInput?.value || "";
        const toDate = toDateInput?.value || "";

        // Get selected tags
        const selectedTags = Array.from(tagCheckboxes)
          .filter((checkbox) => checkbox.checked)
          .map((checkbox) => checkbox.value);

        let visibleCount = 0;

        blogCards.forEach((card) => {
          const title =
            card.querySelector("h3")?.textContent.toLowerCase() || "";
          const description =
            card.querySelector("p")?.textContent.toLowerCase() || "";
          const author = card.getAttribute("data-author")?.toLowerCase() || "";
          const date = card.getAttribute("data-date") || "";
          const tags = (card.getAttribute("data-tags") || "").split(",");

          // Check if post matches all filters
          const matchesSearch =
            title.includes(searchTerm) || description.includes(searchTerm);
          const matchesAuthor = !authorTerm || author.includes(authorTerm);
          const matchesFromDate = !fromDate || date >= fromDate;
          const matchesToDate = !toDate || date <= toDate;

          // Check if post has at least one of the selected tags (or if no tags are selected)
          const matchesTags =
            selectedTags.length === 0 ||
            selectedTags.some((tag) => tags.includes(tag));

          // Show/hide the blog card
          if (
            matchesSearch &&
            matchesAuthor &&
            matchesFromDate &&
            matchesToDate &&
            matchesTags
          ) {
            card.style.display = "block";
            visibleCount++;
          } else {
            card.style.display = "none";
          }
        });

        // Show/hide no results message
        if (noResults) {
          noResults.style.display = visibleCount === 0 ? "block" : "none";
        }
      };

      // Add event listeners
      searchInput?.addEventListener("input", filterPosts);
      authorInput?.addEventListener("input", filterPosts);
      tagCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", filterPosts);
      });
      fromDateInput?.addEventListener("change", filterPosts);
      toDateInput?.addEventListener("change", filterPosts);

      // Reset filters
      resetButton?.addEventListener("click", () => {
        if (searchInput) searchInput.value = "";
        if (authorInput) authorInput.value = "";
        tagCheckboxes.forEach((checkbox) => {
          checkbox.checked = false;
        });
        if (fromDateInput) fromDateInput.value = "";
        if (toDateInput) toDateInput.value = "";

        filterPosts();
      });
    });
  </script>
</BaseLayout>
